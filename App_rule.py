import streamlit as st
import pandas as pd
import re

# --- D·ªØ li·ªáu s·∫£n ph·∫©m ---
df = pd.read_csv("data/dienthoai_renamed (1).csv")
BRANDS = df["Brand"].unique()

# --- Ki·∫øn th·ª©c c∆° b·∫£n v·ªÅ c·∫•u h√¨nh ---
KienThucCauHinh = {
    "ram": "üí° RAM (Random Access Memory) gi√∫p ƒëi·ªán tho·∫°i ch·∫°y ƒëa nhi·ªám m∆∞·ª£t m√† h∆°n. RAM 8GB l√† ƒë·ªß cho ph·∫ßn l·ªõn c√°c t√°c v·ª•, ch∆°i game v√† l√†m vi·ªác.",
    "pin": "üîã Dung l∆∞·ª£ng pin c√†ng l·ªõn (v√≠ d·ª• 5000mAh) th√¨ th·ªùi gian s·ª≠ d·ª•ng c√†ng d√†i. Tuy nhi√™n, th·ªùi l∆∞·ª£ng c√≤n ph·ª• thu·ªôc v√†o t·∫ßn su·∫•t s·ª≠ d·ª•ng v√† t·ªëi ∆∞u h·ªá th·ªëng.",
    "camera": "üì∑ ƒê·ªô ph√¢n gi·∫£i camera (MP) cao cho ph√©p ch·ª•p ·∫£nh s·∫Øc n√©t h∆°n, nh∆∞ng ch·∫•t l∆∞·ª£ng ·∫£nh c√≤n ph·ª• thu·ªôc v√†o c·∫£m bi·∫øn, ·ªëng k√≠nh v√† ph·∫ßn m·ªÅm x·ª≠ l√Ω.",
    "storage": "üíæ B·ªô nh·ªõ (storage) l√† n∆°i l∆∞u tr·ªØ ·∫£nh, ·ª©ng d·ª•ng, video... 128GB ph√π h·ª£p ng∆∞·ªùi d√πng ph·ªï th√¥ng, 256GB+ d√†nh cho ng∆∞·ªùi ch·ª•p ·∫£nh/video nhi·ªÅu.",
    "brand": "üè∑Ô∏è M·ªói h√£ng ƒëi·ªán tho·∫°i c√≥ th·∫ø m·∫°nh ri√™ng: Apple t·ªëi ∆∞u m∆∞·ª£t m√†, Samsung nhi·ªÅu t√≠nh nƒÉng, Xiaomi gi√° t·ªët, Asus hi·ªáu nƒÉng cao cho game th·ªß.",
    "chip": "‚öôÔ∏è Chip x·ª≠ l√Ω (CPU) nh∆∞ Snapdragon, Apple A, MediaTek... ·∫£nh h∆∞·ªüng ƒë·∫øn hi·ªáu nƒÉng t·ªïng th·ªÉ. Chip m·∫°nh cho tr·∫£i nghi·ªám m∆∞·ª£t khi ch∆°i game, m·ªü ·ª©ng d·ª•ng."
}

# --- Tr√≠ch xu·∫•t th√¥ng tin ng∆∞·ªùi d√πng ---
def trich_xuat_thong_tin(text):
    info = {}

    # Tr√≠ch xu·∫•t Brand
    brand_matches = [brand for brand in BRANDS if brand.lower() in text.lower()]
    if brand_matches:
        info["Brand"] = brand_matches

    # C·∫£i ti·∫øn tr√≠ch xu·∫•t kho·∫£ng gi√°:
    # T√¨m t·∫•t c·∫£ c√°c s·ªë li√™n quan ƒë·∫øn gi√°, r·ªìi x√°c ƒë·ªãnh kho·∫£ng gi√°
    # H·ªó tr·ª£ d·∫°ng "kho·∫£ng 10 tri·ªáu ƒë·∫øn 20 tri·ªáu", "gi√° 10-20 tri·ªáu", "t·ª´ 10 tri·ªáu ƒë·∫øn 20 tri·ªáu"
    price_numbers = re.findall(r'(\d{1,3})\s*(tri·ªáu|tr)?', text.lower())
    price_ranges = re.findall(r'(\d{1,3})\s*(tri·ªáu|tr)?\s*(ƒë·∫øn|-|~)\s*(\d{1,3})\s*(tri·ªáu|tr)?', text.lower())

    if price_ranges:
        # L·∫•y kho·∫£ng gi√° ƒë·∫ßu ti√™n t√¨m ƒë∆∞·ª£c
        start, _, _, end, _ = price_ranges[0]
        price_from = int(start) * 1_000_000
        price_to = int(end) * 1_000_000
        # ƒê·∫£m b·∫£o price_from <= price_to
        if price_from > price_to:
            price_from, price_to = price_to, price_from
        info["PriceRange"] = (price_from, price_to)

    elif len(price_numbers) >= 2:
        # N·∫øu c√≥ √≠t nh·∫•t 2 s·ªë gi√°, gi·∫£ ƒë·ªãnh 2 s·ªë ƒë√≥ l√† kho·∫£ng gi√°
        p_from = int(price_numbers[0][0]) * 1_000_000
        p_to = int(price_numbers[1][0]) * 1_000_000
        if p_from > p_to:
            p_from, p_to = p_to, p_from
        info["PriceRange"] = (p_from, p_to)

    elif price_numbers:
        # N·∫øu ch·ªâ c√≥ 1 gi√°, coi nh∆∞ gi√° c·ªë ƒë·ªãnh
        info["FinalPrice"] = int(price_numbers[0][0]) * 1_000_000

    # C√°c th√¥ng s·ªë kh√°c
    match_ram = re.search(r'ram\s*(\d+)', text.lower())
    if match_ram:
        info["RAM"] = int(match_ram.group(1))

    match_storage = re.search(r'(?:b·ªô nh·ªõ|storage)?\s*(\d+)\s*gb', text.lower())
    if match_storage:
        info["Storage"] = int(match_storage.group(1))

    match_camera = re.search(r'camera\s*(\d+)', text.lower())
    if match_camera:
        info["RearCameraResolution"] = int(match_camera.group(1))

    match_battery = re.search(r'(?:pin|battery)\s*(\d+)', text.lower())
    if match_battery:
        info["BatteryCapacity"] = int(match_battery.group(1))

    return info



# --- Ph√¢n t√≠ch xem c√≥ ph·∫£i c√¢u h·ªèi l√Ω thuy·∫øt kh√¥ng (c·∫≠p nh·∫≠t c·∫£i ti·∫øn cho c√¢u h·ªèi RAM) ---
def tra_cuu_kien_thuc(text):
    text_lower = text.lower()

    # X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ RAM (so s√°nh 8GB v·ªõi 16GB ho·∫∑c cao h∆°n)
    if "ram" in text_lower:
        if any(kw in text_lower for kw in ["8gb", "8 gb"]) and any(kw in text_lower for kw in ["16gb", "16 gb", "cao h∆°n", "l·ªõn h∆°n", "so s√°nh", "kh√°c bi·ªát"]):
            return (
                "üí° RAM 8GB ƒë·ªß cho ƒëa s·ªë t√°c v·ª• v√† ch∆°i game m∆∞·ª£t m√†. "
                "RAM 16GB ho·∫∑c cao h∆°n gi√∫p ƒëa nhi·ªám t·ªët h∆°n, chuy·ªÉn ƒë·ªïi ·ª©ng d·ª•ng nhanh h∆°n, "
                "ph√π h·ª£p v·ªõi ng∆∞·ªùi d√πng chuy√™n s√¢u ho·∫∑c ch·∫°y c√°c ·ª©ng d·ª•ng n·∫∑ng."
            )
        # Tr·∫£ l·ªùi c√¢u h·ªèi chung v·ªÅ RAM
        elif any(kw in text_lower for kw in ["nh∆∞ th·∫ø n√†o", "l√† g√¨", "t√°c d·ª•ng", "c√≥ t·ªët kh√¥ng"]):
            return KienThucCauHinh.get("ram")

    # X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ Pin
    if "pin" in text_lower or "battery" in text_lower:
        if any(kw in text_lower for kw in ["so s√°nh", "kh√°c bi·ªát", "kh√°c nhau", "cao h∆°n", "th·ªùi l∆∞·ª£ng"]):
            return (
                "üîã Pin dung l∆∞·ª£ng l·ªõn h∆°n (v√≠ d·ª• 5000mAh so v·ªõi 4000mAh) th∆∞·ªùng cho th·ªùi gian s·ª≠ d·ª•ng d√†i h∆°n. "
                "Tuy nhi√™n, th·ªùi l∆∞·ª£ng pin c√≤n ph·ª• thu·ªôc v√†o t·ªëi ∆∞u ph·∫ßn m·ªÅm v√† c√°ch s·ª≠ d·ª•ng."
            )
        elif any(kw in text_lower for kw in ["nh∆∞ th·∫ø n√†o", "l√† g√¨", "c√≥ t·ªët kh√¥ng"]):
            return KienThucCauHinh.get("pin")

    # X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ Camera
    if "camera" in text_lower:
        if any(kw in text_lower for kw in ["so s√°nh", "kh√°c bi·ªát", "kh√°c nhau", "ch·∫•t l∆∞·ª£ng"]):
            return (
                "üì∑ Camera c√≥ ƒë·ªô ph√¢n gi·∫£i cao h∆°n th∆∞·ªùng cho ·∫£nh s·∫Øc n√©t h∆°n, nh∆∞ng ch·∫•t l∆∞·ª£ng c√≤n ph·ª• thu·ªôc v√†o c·∫£m bi·∫øn v√† ph·∫ßn m·ªÅm x·ª≠ l√Ω ·∫£nh."
            )
        elif any(kw in text_lower for kw in ["nh∆∞ th·∫ø n√†o", "l√† g√¨", "t√°c d·ª•ng", "c√≥ t·ªët kh√¥ng"]):
            return KienThucCauHinh.get("camera")

    # X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ Storage (b·ªô nh·ªõ)
    if "b·ªô nh·ªõ" in text_lower or "storage" in text_lower:
        if any(kw in text_lower for kw in ["so s√°nh", "kh√°c bi·ªát", "kh√°c nhau"]):
            return (
                "üíæ B·ªô nh·ªõ l·ªõn h∆°n (v√≠ d·ª• 256GB so v·ªõi 128GB) cho ph√©p l∆∞u tr·ªØ nhi·ªÅu d·ªØ li·ªáu h∆°n nh∆∞ ·∫£nh, video v√† ·ª©ng d·ª•ng."
            )
        elif any(kw in text_lower for kw in ["nh∆∞ th·∫ø n√†o", "l√† g√¨", "t√°c d·ª•ng", "c√≥ t·ªët kh√¥ng"]):
            return KienThucCauHinh.get("storage")

    # X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ Brand (h√£ng)
    if "h√£ng" in text_lower or "brand" in text_lower:
        return KienThucCauHinh.get("brand")

    # X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ Chip (CPU)
    if "chip" in text_lower or "cpu" in text_lower:
        return KienThucCauHinh.get("chip")

    # N·∫øu ph√°t hi·ªán nhi·ªÅu t·ª´ kh√≥a c√πng l√∫c h·ªèi t·ªïng qu√°t
    cau_hoi_phan_mem = ["so s√°nh", "kh√°c bi·ªát", "nh∆∞ th·∫ø n√†o", "th·∫ø n√†o", "c√≥ t·ªët kh√¥ng"]
    if any(kw in text_lower for kw in cau_hoi_phan_mem):
        # T·ªïng h·ª£p gi·∫£i th√≠ch cho c√°c th√†nh ph·∫ßn ph·ªï bi·∫øn
        ket_qua = []
        for key in ["ram", "pin", "camera", "storage", "brand", "chip"]:
            if key in text_lower:
                ket_qua.append(KienThucCauHinh[key])
        if ket_qua:
            return "\n\n".join(ket_qua)

    # M·∫∑c ƒë·ªãnh tr·∫£ l·ªùi theo t·ª´ng t·ª´ kh√≥a ƒë∆°n
    for keyword in KienThucCauHinh:
        if re.search(keyword, text_lower):
            return KienThucCauHinh[keyword]

    return None


# --- L·ªçc s·∫£n ph·∫©m theo ti√™u ch√≠ ---
# --- H√†m l·ªçc s·∫£n ph·∫©m theo ti√™u ch√≠ ---
def loc_dien_thoai(info, df):
    ket_qua = df.copy()

    if "PriceRange" in info:
        price_from, price_to = info["PriceRange"]
        ket_qua = ket_qua[(ket_qua["FinalPrice"] >= price_from) & (ket_qua["FinalPrice"] <= price_to)]
    elif "FinalPrice" in info:
        price = info["FinalPrice"]
        # L·ªçc linh ho·∫°t ¬±1 tri·ªáu ho·∫∑c theo m·ª©c
        ket_qua = ket_qua[(ket_qua["FinalPrice"] >= price - 1_000_000) & (ket_qua["FinalPrice"] <= price + 1_000_000)]

    if "Brand" in info:
        ket_qua = ket_qua[ket_qua["Brand"].str.lower().isin([b.lower() for b in info["Brand"]])]

    if "RAM" in info:
        ram = info["RAM"]
        ket_qua = ket_qua[ket_qua["RAM"] >= ram]

    if "Storage" in info:
        storage = info["Storage"]
        ket_qua = ket_qua[ket_qua["Storage"] >= storage]

    if "RearCameraResolution" in info:
        cam = info["RearCameraResolution"]
        ket_qua = ket_qua[ket_qua["RearCameraResolution"] >= cam]

    if "BatteryCapacity" in info:
        pin = info["BatteryCapacity"]
        ket_qua = ket_qua[ket_qua["BatteryCapacity"] >= pin]

    return ket_qua



# --- UI Streamlit ---
st.set_page_config(page_title="Chatbot T∆∞ v·∫•n ƒêi·ªán tho·∫°i", page_icon="üì±")
st.title("üì± Chatbot T∆∞ v·∫•n ƒêi·ªán tho·∫°i Th√¥ng minh")

if "chat_history" not in st.session_state:
    st.session_state.chat_history = []
if "thong_tin_tich_luy" not in st.session_state:
    st.session_state.thong_tin_tich_luy = {}

with st.form("chat_form", clear_on_submit=True):
    user_input = st.text_input("üí¨ H√£y nh·∫≠p c√¢u h·ªèi ho·∫∑c y√™u c·∫ßu c·ªßa b·∫°n:")
    submitted = st.form_submit_button("G·ª≠i")

if submitted and user_input:
    st.session_state.chat_history.append(("üë§ B·∫°n", user_input))

    # G·ªçi h√†m tr√≠ch xu·∫•t th√¥ng tin
    thong_tin_moi = trich_xuat_thong_tin(user_input)

    # G·ªôp th√¥ng tin m·ªõi v·ªõi th√¥ng tin c≈©
    thong_tin_hop_le = st.session_state.thong_tin_tich_luy.copy()
    for key, val in thong_tin_moi.items():
        if key == "Brand":
            old = thong_tin_hop_le.get("Brand", [])
            if not isinstance(old, list):
                old = [old]
            thong_tin_hop_le["Brand"] = list(set(old + val))
        else:
            thong_tin_hop_le[key] = val

    st.session_state.thong_tin_tich_luy = thong_tin_hop_le

    ket_qua = loc_dien_thoai(thong_tin_hop_le, df)

    if not ket_qua.empty:
        response = "üì± D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë g·ª£i √Ω:\n"
        for _, row in ket_qua.iterrows():
            response += f"""- **{row['Product']}** ({row['Brand']})  
üì¶ Gi√°: **{row['FinalPrice']//1_000_000} tri·ªáu**  
üß† RAM: {row['RAM']}GB | B·ªô nh·ªõ: {row['Storage']}GB  
üì∑ Camera: {row['RearCameraResolution']}MP | üîã Pin: {row['BatteryCapacity']}mAh  
---\n"""
    else:
        response = "‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu."

    st.session_state.chat_history.append(("ü§ñ Chatbot", response))

# Hi·ªÉn th·ªã l·ªãch s·ª≠ tr√≤ chuy·ªán
st.markdown("## üìú L·ªãch s·ª≠ tr√≤ chuy·ªán")
for sender, msg in st.session_state.chat_history:
    st.markdown(f"**{sender}:** {msg}")

# N√∫t x√≥a
col1, col2 = st.columns(2)
with col1:
    if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠"):
        st.session_state.chat_history = []
with col2:
    if st.button("‚ôªÔ∏è X√≥a ti√™u ch√≠ l·ªçc"):
        st.session_state.thong_tin_tich_luy = {}